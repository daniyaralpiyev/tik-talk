import { Component, computed, inject, OnInit, DestroyRef } from '@angular/core';
import { RouterLink, RouterLinkActive } from '@angular/router';
import { AsyncPipe } from '@angular/common';
import { firstValueFrom, interval, switchMap } from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';

import { SubscriberCard } from './subscriber-card/subscriber-card';
import { CustomDirectives, ImgUrlPipe, SvgIcon } from '@tt/common-ui';
import { ChatsService, ProfileService, AuthService } from '@tt/data-access';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [
    SvgIcon,
    SubscriberCard,
    RouterLink,
    AsyncPipe,
    ImgUrlPipe,
    RouterLinkActive,
    CustomDirectives,
  ],
  templateUrl: './sidebar.html',
  styleUrl: './sidebar.scss',
})
export class Sidebar implements OnInit {
  // –ò–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  private profileService = inject(ProfileService);
  private chatsService = inject(ChatsService);
  private authService = inject(AuthService);
  private destroyRef = inject(DestroyRef);

  // –°–∏–≥–Ω–∞–ª—ã –∏ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  subscribers$ = this.profileService.getSubscribersShortList(); // —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  unreadCount = computed(() => this.chatsService.unreadCount()); // —á–∏—Å–ª–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  me = this.profileService.me; // –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é —Å–∞–π–¥–±–∞—Ä–∞
  menuItems = [
    { id: 1, label: '–ú–æ—è –°—Ç—Ä–∞–Ω–∏—Ü–∞', icon: 'home', link: 'profile/me' },
    { id: 3, label: '–ß–∞—Ç—ã', icon: 'chat', link: 'chats' },
    { id: 4, label: '–ü–æ–∏—Å–∫', icon: 'search', link: 'search' },
  ];

  // –ü—Ä–æ—á–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
  colorProperty = 'orange';
  statusMessage = ''; // –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–∫–ª—é—á—ë–Ω / –æ—à–∏–±–∫–∞)

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
  setColor(newColor: string) {
    this.colorProperty = newColor;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
  async ngOnInit() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
      await firstValueFrom(this.profileService.getMe());
      this.statusMessage = 'üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω';

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      await this.connectWSWithTokenRefresh();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      this.startTokenRefreshLoop();
    } catch (err) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
      this.authService.logout();
      this.statusMessage = `–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Sidebar: ${err}`;
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
  private async connectWSWithTokenRefresh() {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      await firstValueFrom(this.authService.refreshAuthToken());

      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
      this.chatsService.wsAdapter.disconnect?.();

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      this.chatsService.wsAdapter.connect({
        url: `${this.chatsService.baseApiUrl}chat/ws`,
        token: this.authService.token ?? '',
        handleMessage: this.chatsService.handleWSMessage,
      });

      this.statusMessage = 'WebSocket —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞';
    } catch (err) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.authService.logout();
      this.statusMessage = `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WS: ${err}`;
    }
  }

  // === –¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ===
  private startTokenRefreshLoop() {
    interval(5 * 60 * 1000) // –∏–Ω—Ç–µ—Ä–≤–∞–ª 5 –º–∏–Ω—É—Ç
      .pipe(
        takeUntilDestroyed(this.destroyRef), // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        switchMap(() => this.authService.refreshAuthToken()) // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
      )
      .subscribe({
        // —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        next: async () => {
          await this.reconnectWebSocket(); // –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º WS —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
          this.statusMessage = 'üîÅ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –∏ WS –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á—ë–Ω';
        },
        // –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        error: (err) => {
          this.authService.logout();
          this.statusMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${err}`;
        },
      });
  }

  // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
  private async reconnectWebSocket() {
    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.chatsService.wsAdapter.disconnect?.();

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      this.chatsService.wsAdapter.connect({
        url: `${this.chatsService.baseApiUrl}chat/ws`,
        token: this.authService.token ?? '',
        handleMessage: this.chatsService.handleWSMessage,
      });

      this.statusMessage = 'WebSocket —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á—ë–Ω';
    } catch (err) {
      this.statusMessage = `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: ${err}`;
    }
  }
}
